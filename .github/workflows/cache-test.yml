name: Caching tests

on: [push, pull_request]

jobs:
  bad-cache-arg:
    name: Check option handling

    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Fail to install Cygwin
        uses: ./
        with:
          cache: bad-argument
        continue-on-error: true

      # The install step should have failed due to the bad `cache` argument.
      # Check there's no C:\cygwin directory.
      - name: Check Cygwin not installed
        shell: pwsh
        run: |
          if (Test-Path -Path C:\cygwin) {
            Write-Output "::error::Unexpectedly found Cygwin installation"
            exit 1
          }

  # This test validates assumptions made by other tests, notably that if we
  # install one package, we won't find the other installed, so we can use each
  # of these packages as a flag to check when the cache has and hasn't been
  # updated.
  validate-dependencies:
    name: Validate package interdependency
    runs-on: windows-latest
    strategy:
      matrix:
        package:
          - cygwin  # Check base installation doesn't add anything unexpected
          - afio
          - arc
          - argon2
          - ascii
          - autossh
          - balance

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Cygwin
        uses: ./
        with:
          packages: ${{ matrix.package }}
          # Can't use caches here: saving them gives no value, while restoring
          # them might pick up packages we don't want.
          cache: disabled

      - name: Check what's installed
        shell: bash --noprofile --norc -e -o pipefail -o igncr {0}
        run: |
          for package in afio arc argon2 ascii autossh balance; do
            echo "::debug::Checking for $package"
            if [[ "$package" = '${{ matrix.package }}' ]]; then
              if ! cygcheck -cd "$package" | grep -q "^$package "; then
                echo "::error::Didn't find $package installed"
                exit 1
              fi
              found_file=
              for file in /cygdrive/c/cygwin-packages/*/*/*/*/"$package"-*.tar.*; do
                if [[ -f "$file" ]]; then
                  echo "::debug::Found $package in package cache"
                  found_file=Yes
                  break
                fi
              done
              if [[ -z "$found_file" ]]; then
                echo "::error::Didn't find $package in download cache"
              fi
            else
              if cygcheck -cd "$package" | grep -q "^$package "; then
                echo "::error::Found $package installed alongside ${{ matrix.package }}"
                exit 1
              fi
              found_file=
              for file in /cygdrive/c/cygwin-packages/*/*/*/*/"$package"-*.tar.*; do
                if [[ -f "$file" ]]; then
                  echo "::error::Found $package in package cache alongside ${{ matrix.package }}"
                  exit 1
                fi
              done
            fi
          done

  test-cache-options:
    name: Test cache options
    runs-on: windows-latest

    # Ordering is important here to ensure the correct things are in the
    # correct caches at the correct times.
    #
    # This also relies on having six Cygwin packages that don't have any
    # cross-dependencies (and ideally are small and have few dependencies of
    # their own), so we can distinguish what's cached at what step.
    #
    # We test for the correct behaviour in the following circumstances:
    #
    # option      | saves   | restores
    # ------------+---------+----------
    # disabled    | no (1)  | no (5)
    # enabled     | yes (2) | yes (6)
    # saveonly    | yes (3) | no (7)
    # restoreonly | no (4)  | yes (8)
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # The first Cygwin installation step here must be a "saveonly" step.
      # This means any subsequent steps in this job will pick up a cache
      # created earlier in this job, rather than a cache from a different job.
      - name: Install Cygwin + afio, cache saveonly
        uses: ./
        with:
          packages: afio
          cache: saveonly

      - name: Delete the Cygwin installation and downloaded packages
        run: |
          Remove-Item -Force -Recurse -Path C:\cygwin
          Remove-Item -Force -Recurse -Path C:\cygwin-packages
          if (Test-Path -Path C:\_package-cache-hashes.csv) {
            Remove-Item -Force -Path C:\_package-cache-hashes.csv
          }

      - name: Install Cygwin + arc, cache enabled
        uses: ./
        with:
          packages: arc
          cache: enabled

      # This tests 3 + 6
      - name: Ensure afio downloaded
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        run: |
          for file in /cygdrive/c/cygwin-packages/*/*/*/*/afio-*.tar.*; do
            [[ -f "$file" ]] && exit 0
          done
          exit 1

      - name: Delete the Cygwin installation and downloaded packages
        run: |
          Remove-Item -Force -Recurse -Path C:\cygwin
          Remove-Item -Force -Recurse -Path C:\cygwin-packages
          if (Test-Path -Path C:\_package-cache-hashes.csv) {
            Remove-Item -Force -Path C:\_package-cache-hashes.csv
          }

      - name: Install Cygwin + argon2, cache restoreonly
        uses: ./
        with:
          packages: argon2
          cache: restoreonly

      # This tests 2 + 8
      - name: Ensure arc downloaded
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        run: |
          for file in /cygdrive/c/cygwin-packages/*/*/*/*/arc-*.tar.*; do
            [[ -f "$file" ]] && exit 0
          done
          exit 1

      - name: Delete the Cygwin installation and downloaded packages
        run: |
          Remove-Item -Force -Recurse -Path C:\cygwin
          Remove-Item -Force -Recurse -Path C:\cygwin-packages
          if (Test-Path -Path C:\_package-cache-hashes.csv) {
            Remove-Item -Force -Path C:\_package-cache-hashes.csv
          }

      - name: Install Cygwin + ascii, cache enabled
        uses: ./
        with:
          packages: ascii
          cache: enabled

      # This assumes 6 and proves 4
      - name: Ensure argon2 not downloaded
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        run: |
          for file in /cygdrive/c/cygwin-packages/*/*/*/*/argon2-*.tar.*; do
            [[ -f "$file" ]] && exit 1
          done
          exit 0

      - name: Delete the Cygwin installation and downloaded packages
        run: |
          Remove-Item -Force -Recurse -Path C:\cygwin
          Remove-Item -Force -Recurse -Path C:\cygwin-packages
          if (Test-Path -Path C:\_package-cache-hashes.csv) {
            Remove-Item -Force -Path C:\_package-cache-hashes.csv
          }

      - name: Install Cygwin + autossh, cache saveonly
        uses: ./
        with:
          packages: autossh
          cache: saveonly

      # This assumes 2 and proves 7
      - name: Ensure ascii not downloaded
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        run: |
          for file in /cygdrive/c/cygwin-packages/*/*/*/*/ascii-*.tar.*; do
            [[ -f "$file" ]] && exit 1
          done
          exit 0

      - name: Delete the Cygwin installation and downloaded packages
        run: |
          Remove-Item -Force -Recurse -Path C:\cygwin
          Remove-Item -Force -Recurse -Path C:\cygwin-packages
          if (Test-Path -Path C:\_package-cache-hashes.csv) {
            Remove-Item -Force -Path C:\_package-cache-hashes.csv
          }

      - name: Install Cygwin + balance, cache disabled
        uses: ./
        with:
          packages: balance
          cache: disabled

      # This assumes 3 and proves 5
      - name: Ensure autossh not downloaded
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        run: |
          for file in /cygdrive/c/cygwin-packages/*/*/*/*/autossh-*.tar.*; do
            [[ -f "$file" ]] && exit 1
          done
          exit 0

      - name: Delete the Cygwin installation and downloaded packages
        run: |
          Remove-Item -Force -Recurse -Path C:\cygwin
          Remove-Item -Force -Recurse -Path C:\cygwin-packages
          if (Test-Path -Path C:\_package-cache-hashes.csv) {
            Remove-Item -Force -Path C:\_package-cache-hashes.csv
          }

      - name: Install Cygwin, cache restoreonly
        uses: ./
        with:
          cache: restoreonly

      # This assumes 8 and proves 1
      - name: Ensure balance not downloaded
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        run: |
          for file in /cygdrive/c/cygwin-packages/*/*/*/*/balance-*.tar.*; do
            [[ -f "$file" ]] && exit 1
          done
          exit 0

  test-cache-diff:
    name: No unnecessary updates

    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check number of caches in this job
        uses: actions/github-script@v6
        with:
          script: |
            const key_prefix = 'cygwin-install-action-packages-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.job }}-';
            core.debug('Cache prefix: ' + key_prefix);
            const response = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: key_prefix
            });
            core.info('Found ' + response.data.total_count + ' caches');
            if (response.data.total_count != 0) {
              core.setFailed('Expected zero cache entries, found ' + response.data.total_count);
            }

      # Use an installation from the Cygwin Time Machine, to avoid the risk of
      # a poorly timed package update to a regular mirror causing the packages
      # to legitimately change.  This uses `saveonly`, so there's no chance of
      # it picking up a cache from outside the job, and future steps will pick
      # the cache from this job in preference to ones from other jobs.
      - name: Install Cygwin
        uses: ./
        with:
          cache: saveonly
          site: http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/64bit/2021/01/22/181752
          check-sig: false

      - name: Check number of caches in this job
        uses: actions/github-script@v6
        with:
          script: |
            const key_prefix = 'cygwin-install-action-packages-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.job }}-${{ strategy.job-index }}-';
            core.debug('Cache prefix: ' + key_prefix);
            const response = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: key_prefix
            });
            core.info('Found ' + response.data.total_count + ' caches');
            if (response.data.total_count != 1) {
              core.setFailed('Expected one cache entry, found ' + response.data.total_count);
            }

      - name: Delete the Cygwin installation and downloaded packages
        run: |
          Remove-Item -Force -Recurse -Path C:\cygwin
          Remove-Item -Force -Recurse -Path C:\cygwin-packages
          if (Test-Path -Path C:\_package-cache-hashes.csv) {
            Remove-Item -Force -Path C:\_package-cache-hashes.csv
          }

      - name: Install Cygwin again
        uses: ./
        with:
          cache: enabled
          site: http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/64bit/2021/01/22/181752
          check-sig: false

      # Should be exactly the same set of packages, so the cache shouldn't have
      # been updated.
      - name: Check number of caches in this job
        uses: actions/github-script@v6
        with:
          script: |
            const key_prefix = 'cygwin-install-action-packages-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.job }}-${{ strategy.job-index }}-';
            core.debug('Cache prefix: ' + key_prefix);
            const response = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: key_prefix
            });
            core.info('Found ' + response.data.total_count + ' caches');
            if (response.data.total_count != 1) {
              core.setFailed('Expected one cache entry, found ' + response.data.total_count);
            }

      - name: Delete the Cygwin installation and downloaded packages
        run: |
          Remove-Item -Force -Recurse -Path C:\cygwin
          Remove-Item -Force -Recurse -Path C:\cygwin-packages
          if (Test-Path -Path C:\_package-cache-hashes.csv) {
            Remove-Item -Force -Path C:\_package-cache-hashes.csv
          }

      - name: Install Cygwin with a new package
        uses: ./
        with:
          cache: enabled
          packages: ascii
          site: http://ctm.crouchingtigerhiddenfruitbat.org/pub/cygwin/circa/64bit/2021/01/22/181752
          check-sig: false

      # Adding a package should have forced a new cache to be created
      - name: Check number of caches in this job
        uses: actions/github-script@v6
        with:
          script: |
            const key_prefix = 'cygwin-install-action-packages-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.job }}-${{ strategy.job-index }}-';
            core.debug('Cache prefix: ' + key_prefix);
            const response = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: key_prefix
            });
            core.info('Found ' + response.data.total_count + ' caches');
            if (response.data.total_count != 2) {
              core.setFailed('Expected two cache entries, found ' + response.data.total_count);
            }
